package com.google.summit.translation

import com.google.common.truth.Truth.assertThat
import com.google.common.truth.Truth.assertWithMessage
import com.google.summit.ast.declaration.ClassDeclaration
import com.google.summit.ast.declaration.EnumDeclaration
import com.google.summit.ast.declaration.InterfaceDeclaration
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.JUnit4

@RunWith(JUnit4::class)
class ClassDeclarationTest {

  @Test
  fun class_translation_hasClassDeclaration() {
    val cu = TranslateHelpers.parseAndTranslate("class Test { }")

    assertThat(cu.typeDeclaration).isInstanceOf(ClassDeclaration::class.java)
    val classDecl = cu.typeDeclaration as ClassDeclaration
    assertWithMessage("Class should have no super class").that(classDecl.extendsType).isNull()
    assertWithMessage("Class should have no implemented interfaces")
      .that(classDecl.implementsTypes)
      .isEmpty()
  }

  @Test
  fun class_translation_includesInheritance() {
    val cu = TranslateHelpers.parseAndTranslate("class Test extends Base implements I1, I2 { }")
    val classDecl = cu.typeDeclaration as ClassDeclaration

    assertThat(classDecl.extendsType?.asCodeString()).isEqualTo("Base")
    assertThat(classDecl.implementsTypes.map { it.asCodeString() }).containsExactly("I1", "I2")
  }

  @Test
  fun innerTypes_have_enclosingType() {
    val enclosingClassDecl =
      TranslateHelpers.parseAndTranslate(
          """
    class EnclosingClass {
      class InnerClass { }
      interface InnerInterface { }
      enum InnerEnum { }
    }
    """
        )
        .typeDeclaration as
        ClassDeclaration

    assertThat(enclosingClassDecl.innerTypeDeclarations).hasSize(3)
    assertThat(enclosingClassDecl.getEnclosingType()).isNull()
    assertThat(enclosingClassDecl.qualifiedName).isEqualTo("EnclosingClass")

    val innerClassDecl =
      enclosingClassDecl.innerTypeDeclarations.filterIsInstance<ClassDeclaration>().first()
    assertThat(innerClassDecl.getEnclosingType()).isEqualTo(enclosingClassDecl)
    assertThat(innerClassDecl.qualifiedName).isEqualTo("EnclosingClass.InnerClass")

    val innerInterfaceDecl =
      enclosingClassDecl.innerTypeDeclarations.filterIsInstance<InterfaceDeclaration>().first()
    assertThat(innerInterfaceDecl.getEnclosingType()).isEqualTo(enclosingClassDecl)
    assertThat(innerInterfaceDecl.qualifiedName).isEqualTo("EnclosingClass.InnerInterface")

    val innerEnumDecl =
      enclosingClassDecl.innerTypeDeclarations.filterIsInstance<EnumDeclaration>().first()
    assertThat(innerEnumDecl.getEnclosingType()).isEqualTo(enclosingClassDecl)
    assertThat(innerEnumDecl.qualifiedName).isEqualTo("EnclosingClass.InnerEnum")
  }

  @Test
  fun parent_reverses_getChildren() {
    val cu = TranslateHelpers.parseAndTranslate("class Test { }")
    val classDecl = cu.typeDeclaration

    assertThat(cu.getChildren()).containsExactly(classDecl)
    assertThat(classDecl.parent).isEqualTo(cu)

    assertWithMessage("CompilationUnits are the root of the AST and should have no parent")
    .that(cu.parent).isNull()
  }
}
